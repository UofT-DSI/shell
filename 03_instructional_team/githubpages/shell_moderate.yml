title: Unix Shell Moderate Practice Problems
problems:
  - title: "File and Directory Management 1"
    description: |
      You are working on a project and need to create a directory named `data` inside your project directory (`project3`)
      and a file named `info.txt` inside it.

      This is your current terminal session:
      ```bash
      user@computer:~/project3/scripts$ pwd
          /home/user/project3/scripts

      user@computer:~/project3/scripts$ 
      ```

      Select and order the following commands to accomplish this task.
    questiontype: parsons
    options:
      - "`cd ..`"
      - "`mkdir data`"
      - "`cd data`"
      - "`touch info.txt`"
      - "`ls`"
      - "`echo info.txt`"
      - "`cd scripts`"
    correct_options: [0, 1, 2, 3]
    solution: |
      ```bash
      user@computer:~/project3/scripts$ cd ..
      user@computer:~/project3$ mkdir data
      user@computer:~/project3$ cd data
      user@computer:~/project3/data$ touch info.txt
      ```

      We start off in the `scripts` directory.
      - First, we need to navigate to the project root directory using `cd ..` 
            - (`project3` is the parent directory of `scripts`)
      - Then, we can create the `data` directory and navigate into it.
      - Finally, we create the `info.txt` file.

      - we can also list the contents of the current directory using `ls` to check if the `data` directory and 
        `info.txt` file was created successfully



  - title: "File and Directory Management 2"
    description: |
      Create a directory structure for a project with the following hierarchy:
      ```
      project/
      ├── src/
      │   ├── main.py
      │   └── utils.py
      ├── data/
      │   ├── input.csv
      │   └── output.csv
      └── README.md
      ```
    questiontype: freeform
    solution: |
      To create the directory structure, you can use the following commands.
      ```bash
      mkdir -p project/src project/data
      touch project/src/main.py project/src/utils.py project/data/input.csv project/data/output.csv project/README.md
      ```
      - Since the problem asks us to create this in the current directory, we don't need to `cd` anywhere.
      - `mkdir -p` creates the directories and any necessary parent directories.
      - `touch` creates the files in the specified directories.

      **Alternative solution:**
      ```bash
      mkdir project
      mkdir project/src
      touch project/src/main.py
      touch project/src/utils.py
      mkdir project/data
      touch project/data/input.csv
      touch project/data/output.csv
      touch project/README.md
      ```
      - In this longer example, we create the `project` directory first, then create the `src` and `data` directories inside it.
      - `touch` is called individually for each file

      Additionally:
      - `cd` can also be used to change into each directory before creating files, but it is not necessary



  - title: "Output Redirection"
    description: |
      Which command correctly redirects the standard output of `ls` to a file named `filelist.txt` without overwriting?
    questiontype: multiplechoice
    options:
      - "ls > filelist.txt"
      - "ls < filelist.txt"
      - "ls >> filelist.txt"
      - "ls filelist.txt"
    correct_options: [2]
    solution: |
      The correct command is:
      ```bash
      ls >> filelist.txt
      ```
      This sends the output of `ls` into `filelist.txt`, without overwriting the file if it exists.

      - `ls > filelist.txt`: This command **overwrites** the contents of `filelist.txt` with the output of `ls`.
      - `ls < filelist.txt`: This command tries to read from `filelist.txt` as input, which is not what we want. (*not covered in the main session*)
      - `ls filelist.txt`: This command tries to list the contents of `filelist.txt`, instead of writing to it.
      

  - title: "Debugging 1"
    description: |
      You are trying to run a script but encounter an error. The script is supposed to print the current date and time.
      However, it fails with the following error:
      ```
      bash: ./script.sh: No such file or directory
      ```
      What is the likely cause of this error?
    questiontype: multiplechoice
    options:
      - The script does not exist in the current directory.
      - The script does not have execute permissions.
      - The script is not in your PATH.
      - There is a syntax error in the script.
    correct_options: [0]
    solution: |
      The script does not exist in the current directory.
      
      - The script does not have execute permissions: If this were the case, the error would be `permission denied`, not `No such file or directory`.
      - The script is not in your PATH: The error message indicates that the script is being called with `./`, which means it is expected to be in the current directory, not in the PATH.
      - There is a syntax error in the script: A syntax error would occur after the script is found and executed, not before.
    
  - title: "Debugging 2"
    description: |
      Suppose this is the contents of a directory on your computer:
      ```bash
      user@computer:~$ ls ~
          myfile.txt    mydata.csv    myscript.sh   myfolders/
      ```

      When you type the following commands, you get an error:
      ```bash
      user@computer:~$ mv mydata.csv myfolder/
          mv: cannot move 'mydata.csv' to 'myfolder/': No such file or directory
      user@computer:~$ mv myfile.txt myfolder/
          mv: cannot move 'myfile.txt' to 'myfolder/': No such file or directory
      user@computer:~$ mv myscript.sh myfolder/
          mv: cannot move 'myscript.sh' to 'myfolder/': No such file or directory
      ```
      
      How can you fix this error?
    questiontype: freeform
    solution_template:  |
      mv mydata.csv myfolder/
      mv myfile.txt myfolder/
      mv myscript.sh myfolder/
    solution: |
      ```bash
      user@computer:~$ mv mydata.csv myfolders/
      user@computer:~$ mv myfile.txt myfolders/
      user@computer:~$ mv myscript.sh myfolders/
      ```

      The error indicates that the directory `myfolder/` does not exist.
      Ordinarily, we could create the directory using the `mkdir` command, but in this case, it looks like the directory is already created as `myfolders/`.
      To fix the error, we can either create the directory `myfolder/` or move the files to `myfolders/` instead.

      Note the spelling of myfolder**s**/

  - title: "Organizing files"
    description: |
      Suppose this is the contents of a folder on your computer:
      ```bash
      user@computer:~$ ls /data/MYPROJECT/scripts
          analyze_data.py     dataset1.db        dataset2.db      outputimg.png       
          outputimg2.png
      ```

      You've just opened a new terminal and want to organize the files by moving datasets and outputs in separate folders.
      Select and order the following commands to accomplish this task.
    questiontype: parsons
    options:
      - "`cd /data/MYPROJECT`"
      - "`mkdir datasets`"
      - "`mkdir outputs`"
      - "`mv dataset* datasets/`"
      - "`mv scripts/dataset* datasets/`"
      - "`mv output* outputs/`"
      - "`mv scripts/output* outputs/`"
      - "`cd data`"
      - "`cd outputs`"
      - "`echo scripts/output*`"
      - "`movefile dataset* datasets/`"
      - "`movefile output* outputs/`"
      - "`cd`"
      - "`ls`"
    correct_options: [0, [1, 2], [4, 6]]

    solution: |
      ```bash
      user@computer:~$ cd /data/MYPROJECT
      user@computer:/data/MYPROJECT$ mkdir datasets
      user@computer:/data/MYPROJECT$ mkdir outputs
      user@computer:/data/MYPROJECT$ mv scripts/dataset* datasets/
      user@computer:/data/MYPROJECT$ mv scripts/output* outputs/
      ```

      First, we need to navigate to the project directory, then create the `datasets` and `outputs` directories.
      After that, we can move the dataset and output files into their respective directories.

        - Running `mv dataset* datasets/` won't work, because the `dataset*` files are in the `scripts` directory, not the current directory.
        - The command `ls` can be run to check the contents of the current directory, but it is not necessary to accomplish the task.

      
  - title: "Text files"
    description: |
      Suppose you have the following script:
      ```bash
      # preview all my data files
      echo "Data file preview"
      echo "================="
      cat mydata/*.txt
      ```

      When your project had fewer data files, this script worked fine. But now, the output is too long to read.  
      What are some approaches to fix this?
    questiontype: freeform
    solution: |
      There are several ways to fix this issue. Here are a few options:
      - Redirect the output to a file for later review with less
        ```bash
        cat mydata/*.txt > preview.txt
        less preview.txt
        ```

      **More advanced strategies not covered in the main session:**
      - Use the pipe operator to pipe the output to `less` directly.
        ```bash
        cat mydata/*.txt | less
        ```
      - Use `head` or `tail` to preview only the first or last few lines of each file.
        ```bash
        head mydata/*.txt
        tail mydata/*.txt
        ```


  